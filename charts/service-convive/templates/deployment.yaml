{{- if .Values.knativeDeploy }}
{{- else }}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    draft: {{ default "draft-app" .Values.draft }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        draft: {{ default "draft-app" .Values.draft }}
        app: {{ template "fullname" . }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - /bin/sh
          - -c
          - if [[ "$(echo $MONGO_USER_SECRET)" !=  "" ]]; then export MONGO_USER_PASS=$MONGO_USER_SECRET:$MONGO_PASS_SECRET@; else export MONGO_USER_PASS=""; fi;
          - export MONGO_URI=mongodb://$MONGO_USER_PASS$MONGO_URL_CONFIGMAP:$MONGO_PORT_CONFIGMAP/$MONGO_BASE?replicatSet=$MONGO_RS_CONFIGMAP;

        env:
{{- range $pkey, $pval := .Values.env }}
        - name: {{ $pkey }}
          value: {{ quote $pval }}
{{- end }}
        - name: MONGO_BASE
          value: {{ .Chart.Name }}
        - name: MONGO_URL_CONFIGMAP
          valueFrom:
            configMapKeyRef:
              name: adresse-mongodb
              key: mongo_url
        - name: MONGO_PORT_CONFIGMAP
          valueFrom:
            configMapKeyRef:
              name: adresse-mongodb
              key: mongo_port
        - name: MONGO_RS_CONFIGMAP
          valueFrom:
            configMapKeyRef:
              name: adresse-mongodb
              key: mongo_rs
        - name: MONGO_USER_SECRET
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: username
        - name: MONGO_PASS_SECRET
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: password
        ports:
        - containerPort: {{ .Values.service.internalPort }}
        livenessProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
{{- end }}
